@using Client.LocalServices
@using Client.Routing
@using System.Security.Claims

@inherits LayoutComponentBase

<div class="page h-100">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4 d-flex justify-content-between">
            <label>Bienvenido, @Nombre!</label>
            <button class="btn btn-outline-light" @onclick="HandleLogout">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-box-arrow-right" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M10 12.5a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v2a.5.5 0 0 0 1 0v-2A1.5 1.5 0 0 0 9.5 2h-8A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-2a.5.5 0 0 0-1 0z" />
                    <path fill-rule="evenodd" d="M15.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708.708L14.293 7.5H5.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708z" />
                </svg>
            </button>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    [Inject] public NavigationManager NavManager { get; set; } = null!;
    [Inject] public CustomAuthStateProvider AuthStateProvider { get; set; } = null!;
    [Inject] public AuthService AuthService { get; set; } = null!;

    private string Nombre = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        bool isAuthenticated = authState.User.Identity!.IsAuthenticated;
        Console.WriteLine($"Is Authenticated: {isAuthenticated}");

        if (isAuthenticated) Nombre = authState.User.Claims.First(claim => claim.Type == "name").Value;
    }

    private async Task HandleLogout()
    {
        await AuthService.Logout();
        NavManager.NavigateTo(ClientRoutes.LoginRoute);
    }
}